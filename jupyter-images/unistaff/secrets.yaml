hub:
  cookieSecret: "xxx"
  config:
    Authenticator:
      admin_users:
        - admins
      #If you have a large list of users, consider using allowed_users.yaml
      allowed_users:
        #- ana-v-espinoza
        - users
      # necessary for jhub admins to add user via admin page `<url>/hub/admin`
      allow_existing_users: true
    GitHubOAuthenticator:
      client_id: "xxx"
      client_secret: "xxx"
      oauth_callback_url: "https://unistaff.ees220002.projects.jetstream-cloud.org:443/oauth_callback"
      allowed_organizations:
        - org
      scope:
        - "read:org"
        - "read:user"
    JupyterHub:
      authenticator_class: github
  extraConfig:
    01-no-labels: |
      from kubespawner import KubeSpawner
      class CustomSpawner(KubeSpawner):
        def _build_common_labels(self, extra_labels):
          labels = super()._build_common_labels(extra_labels)
          # Until https://github.com/jupyterhub/kubespawner/issues/498
          # is fixed
          del labels['hub.jupyter.org/username']
          return labels
      c.JupyterHub.spawner_class = CustomSpawner
    01-custom-spawner: |
      from kubespawner import KubeSpawner
      class CustomSpawner(KubeSpawner):
          def _build_common_labels(self, extra_labels):
              labels = super()._build_common_labels(extra_labels)
              labels.pop('hub.jupyter.org/username', None)
              return labels
          def apply_kubespawner_override(self, override_dict):
              super().apply_kubespawner_override(override_dict)
              # Inject extra_containers if defined in the profile
              if 'extra_containers' in override_dict:
                  self.extra_containers = override_dict['extra_containers']
      c.JupyterHub.spawner_class = CustomSpawner
      
proxy:
  secretToken: "xxx"

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt"
    #For manually issuing certificates: see vms/jupyter/readme.md
    #cert-manager.io/issuer: "incommon"
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
  hosts:
      - "unistaff.ees220002.projects.jetstream-cloud.org"
  tls:
      - hosts:
         - "unistaff.ees220002.projects.jetstream-cloud.org"
        secretName: certmanager-tls-jupyterhub

singleuser:
  extraContainers:
   - name: cave-idv-sidecar
     image: "unidata/cave-idv-sidcar:xxx"
     volume_mounts:
       - mountPath: /home/jovyan
         name: volume-{user_server}
     ports:
       - containerPort: 6080
         name: novnc
     resources:
       requests:
         cpu: "250m"
         memory: "512Mi"
       limits:
         cpu: "1"
         memory: "1Gi"
  extraEnv:
    NBGITPULLER_DEPTH: "0"
    START_VIRTUAL_DESKTOP: "1"
  storage:
    capacity: 15Gi
  startTimeout: 600
  defaultUrl: "/lab"
  image:
    name: "unidata/unistaff"
    tag: "xxx"
  lifecycleHooks:
    postStart:
      exec:
          command:
            - "bash"
            - "-c"
            - >
              dir="/home/jovyan/.ssh"; [ -d $dir ] && { chmod 700 $dir && chmod -f 600 $dir/* && chmod -f 644 $dir/*.pub; } || true;
              cp -t /home/jovyan /Acknowledgements.ipynb /additional_kernels.ipynb;
              python /default_kernel.py $DEFAULT_ENV_NAME /home/jovyan;
              [[ -f $HOME/.bashrc ]] || cp /etc/skel/.bashrc $HOME/;
              [[ -f $HOME/.profile ]] || cp /etc/skel/.profile $HOME/;
              [[ -f $HOME/.bash_logout ]] || cp /etc/skel/.bash_logout $HOME/;
              [[ -f $HOME/.condarc ]] || cp /.condarc $HOME/;
              [ -d "/share" ] && [ ! -L ~/share ] && ln -s /share ~/share || true;
  profileList:
  - display_name: "Low Power (m3.small)"
    description: "4 GB of memory; 1.5 vCPUS"
    kubespawner_override:
      mem_guarantee: 4G
      mem_limit: 4G
      cpu_guarantee: 1.5
      cpu_limit: 1.5
      node_selector:
        capi.stackhpc.com/node-group: default-worker
  - display_name: "Low Power (m3.medium)"
    description: "4 GB of memory; 1.5 vCPUS"
    kubespawner_override:
      mem_guarantee: 4G
      mem_limit: 4G
      cpu_guarantee: 1.5
      cpu_limit: 1.5
      node_selector:
        capi.stackhpc.com/node-group: mediums
  - display_name: "Medium Power (m3.medium)"
    description: "12 GB of memory; 3.5 vCPUS"
    kubespawner_override:
      mem_guarantee: 12G
      mem_limit: 12G
      cpu_guarantee: 3.5
      cpu_limit: 3.5
      node_selector:
        capi.stackhpc.com/node-group: mediums
  - display_name: "Medium Power (m3.medium), recommended for IDV or CAVE"
    default: true
    description: "Jupyter: 3 GB of memory; 1 vCPUS, IDV/CAVE: 21 GB of memory; 6 vCPUS, "
    kubespawner_override:
      mem_guarantee: 3G
      mem_limit: 3G
      cpu_guarantee: 1
      cpu_limit: 1
      node_selector:
        capi.stackhpc.com/node-group: mediums
      extra_containers:
        - name: cave-idv-sidecar
          image: "docker.io/unidata/cave-idv-sidecar:2025Apr15_230246_87f6"
          volume_mounts:
            - mountPath: /home/jovyan
              name: volume-{username}
          ports:
            - containerPort: 6080
              name: novnc
          resources:
            requests:
              cpu: "6"
              memory: "21Gi"
            limits:
              cpu: "6"
              memory: "21Gi"
  - display_name: "High Power (m3.medium)"
    description: "24 GB of memory; 7 vCPUs"
    kubespawner_override:
      mem_guarantee: 24G
      mem_limit: 24G
      cpu_guarantee: 7
      cpu_limit: 7
      node_selector:
        capi.stackhpc.com/node-group: mediums
