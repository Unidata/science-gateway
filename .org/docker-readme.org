#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+OPTIONS: auto-id:t
#+TITLE: docker-readme
#+DATE: <2017-03-03 Fri>
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 9.0.5)

#+PROPERTY: header-args :noweb yes :tangle ../docker-install.sh :eval no

* Org Setup :noexport:
  :PROPERTIES:
  :CUSTOM_ID: h:ECAA0F5F
  :END:

* Docker Installation
  :PROPERTIES:
  :CUSTOM_ID: h:BA11A408
  :END:

The ~xsede-jetstream~ project is heavily dependent on Docker, and you will have to have access to a recent version of Docker.  Herein are some instructions to help you get going with Docker.

** Linux VM or Bare Metal Linux
   :PROPERTIES:
   :CUSTOM_ID: h:FF95E7EC
   :END:

*** Quick Start
    :PROPERTIES:
    :CUSTOM_ID: h:4A4B1084
    :END:

Quick start instructions for Linux OS can be found here. For a more complete explanation of the Docker installation start with the [[#h:AE788331][System Maintenance]] section.

#+BEGIN_SRC shell :tangle no
  git clone https://github.com/Unidata/xsede-jetstream
#+END_SRC

and run the =docker-install.sh= script collocated with this readme, e.g.,:

#+BEGIN_SRC shell :tangle no
  cd xsede-jetstream
  chmod +x docker-install.sh; sudo ./docker-install.sh -u ${USER}
#+END_SRC

*** System Maintenance
    :PROPERTIES:
    :CUSTOM_ID: h:AE788331
    :END:

Always think before typing the following commands as ~root~ user!

Do the usual maintenance via ~apt-get~ or ~yum~. Also install ~git~ for good measure.

# Set up tangling

#+BEGIN_SRC shell :exports none :shebang "#!/bin/bash"
  if [ "$EUID" -ne 0 ]; then
    echo "Please run as root"
    exit
  fi

  usage="$(basename "$0") [-h] [-u, --user user name] -- 
  script to setup Docker. Run as root. Think before your type:\n
      -h  show this help text\n
      -u, --user User name that will be running Docker containers.\n"

  while [[ $# > 0 ]]
  do
      key="$1"
      case $key in
          -u|--user)
              DOCKER_USER="$2"
              shift # past argument
              ;;
          -h|--help)
              echo -e $usage
              exit
              ;;
      esac
      shift # past argument or value
  done

  if [ -z "$DOCKER_USER" ]; then
        echo "Must supply a user:" 
        echo -e $usage
        exit 1
  fi
#+END_SRC

**** apt-get
     :PROPERTIES:
     :CUSTOM_ID: h:B7D88FA4
     :END:

#+BEGIN_SRC org :noweb-ref apt-get :exports none :tangle no
  apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade \
      && apt-get -y install git
#+END_SRC

#+BEGIN_SRC shell :exports none
  if [ -n "$(command -v apt-get)" ]; then
    <<apt-get>>
  fi
#+END_SRC

#+BEGIN_SRC shell :tangle no
  <<apt-get>>
#+END_SRC

**** yum
     :PROPERTIES:
     :CUSTOM_ID: h:C9632B6B
     :END:

#+BEGIN_SRC org :noweb-ref yum :exports none :tangle no
  yum -y update && yum -y install git
#+END_SRC

#+BEGIN_SRC shell :exports none
  if [ -n "$(command -v yum)" ]; then
    <<yum>>
  fi
#+END_SRC

#+BEGIN_SRC shell :tangle no
    <<yum>>
#+END_SRC

*** Install Docker
    :PROPERTIES:
    :CUSTOM_ID: h:786799C4
    :END:

Define a ~DOCKER_USER~. Again, think before you type.

#+BEGIN_SRC shell
  curl -sSL get.docker.com | sh
  usermod -aG docker ${DOCKER_USER}
#+END_SRC

*** Install docker-compose
    :PROPERTIES:
    :CUSTOM_ID: h:02EF6BAD
    :END:

#+BEGIN_SRC org :noweb-ref dcompose-version :exports none :tangle no
  1.11.2
#+END_SRC

#+BEGIN_SRC shell 
  curl -L https://github.com/docker/compose/releases/download/<<dcompose-version>>/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose

  chmod +x /usr/local/bin/docker-compose
#+END_SRC

*** Start Docker Daemon
    :PROPERTIES:
    :CUSTOM_ID: h:B6F088A3
    :END:

As ~root~ user, make sure Docker is available as a daemon. You can issue one of the following commands depending on your flavor of Linux.

#+BEGIN_SRC org :noweb-ref service :exports none :tangle no
  service docker start
#+END_SRC

#+BEGIN_SRC shell :exports none
  if [ -n "$(command -v apt-get)" ]; then
    <<service>>
  fi
#+END_SRC

#+BEGIN_SRC shell :tangle no
  <<service>>
#+END_SRC

or 

#+BEGIN_SRC org :noweb-ref systemctl :exports none :tangle no
  systemctl enable docker.service
  systemctl start docker.service
#+END_SRC

#+BEGIN_SRC shell :exports none
  if [ -n "$(command -v yum)" ]; then
    <<systemctl>>
  fi
#+END_SRC


#+BEGIN_SRC shell :tangle no
  <<systemctl>>
#+END_SRC

*** Reboot
    :PROPERTIES:
    :CUSTOM_ID: h:6D94F8D5
    :END:

Now reboot the machine:

#+BEGIN_SRC shell 
  reboot now
#+END_SRC

Log back into Linux machine or VM.

*** Docker Hello World
    :PROPERTIES:
    :CUSTOM_ID: h:F3633FE6
    :END:

Run this container to make sure the docker install has gone smoothly:

#+BEGIN_SRC shell :tangle no
  docker run hello-world
#+END_SRC

** Other Environments (e.g., macOS, Windows)
   :PROPERTIES:
   :CUSTOM_ID: h:D1009153
   :END:

For other environments, see [[https://docs.docker.com/engine/installation/][the official docker installation documentation]].
