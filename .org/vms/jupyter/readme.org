#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+OPTIONS: auto-id:t
#+TITLE: Creating  a JupyterHub on Jetstream with the Zero to JuypyterHub Project
#+DATE:  <2017-06-26 Mon>
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 9.0.5)

* Creating  a JupyterHub on Jetstream with the Zero to JuypyterHub Project
  :PROPERTIES:
  :CUSTOM_ID: h:D73CBC56
  :END:

** Kubernetes Cluster
   :PROPERTIES:
   :CUSTOM_ID: h:65F9358E
   :END:

[[file:../../openstack/readme.org::#h:DA34BC11][Create a Kubernetes cluster]] with the desired number of nodes and VM sizes. Lock down the master node of the cluster per Unidata security procedures. Work with sys admin staff to obtain a DNS name (e.g., jupyterhub.unidata.ucar.edu), and a certificate from a certificate authority for the master node.

** unidata/unidatahub Docker Container
   :PROPERTIES:
   :CUSTOM_ID: h:CD007D2A
   :END:

Build the Docker container in this directory and push it to dockerhub.

#+BEGIN_SRC sh
  docker build -t unidata/unidatahub:`openssl rand -hex 6` . > /tmp/docker.out 2>&1 &
  docker push unidata/unidatahub:<container id>
#+END_SRC

** Configure and Deploy the JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h:E5CA5D99
   :END:

From the client host where you created the Kubernetes cluster, follow [[https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html][Andrea Zonca's instructions]].

After you have created the ~secrets.yaml~ as instructed, customize it with the choices below

*** Letsencrypt versus Certificate from a Certificate Authority
    :PROPERTIES:
    :CUSTOM_ID: h:294A4A20
    :END:

**** Letsencrypt
     :PROPERTIES:
     :CUSTOM_ID: h:E1082806
     :END:

Follow [[https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html][Andrea's instructions]] on setting up letsencrypt along with this yaml snippet:

#+BEGIN_SRC yaml
ingress:
  enabled: true
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
    - jupyterhub.unidata.ucar.edu
  tls:
      - hosts:
         - jupyterhub.unidata.ucar.edu
        secretName: certmanager-tls-jupyterhub
#+END_SRC

**** Certificate from CA
     :PROPERTIES:
     :CUSTOM_ID: h:205AEDAB
     :END:

Work with sys admin staff to obtain a certificate from a CA.

Follow [[https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html][Andrea's instructions]] on setting up HTTPS with custom certificates.

#+BEGIN_SRC yaml
ingress:
  enabled: true
  annotations:
    kubernetes.io/tls-acme: "true"
  hosts:
    - jupyterhub.unidata.ucar.edu
  tls:
      - hosts:
         - jupyterhub.unidata.ucar.edu
        secretName: <cert-secret>
#+END_SRC

*** OAuth Authentication
  :PROPERTIES:
  :CUSTOM_ID: h:8A3C5434
  :END:

**** Globus
  :PROPERTIES:
  :CUSTOM_ID: h:C0E8193F
  :END:

[[https://developers.globus.org/][Globus OAuth capability]] is available for user authentication. The instructions [[https://github.com/jupyterhub/oauthenticator#globus-setup][here]] are relatively straightforward.

#+BEGIN_SRC yaml
  auth:
    type: globus
    globus:
      clientId: "xxx"
      clientSecret: "xxx"
      callbackUrl: "https://jupyterhub.unidata.ucar.edu:443/oauth_callback"
      identityProvider: "xsede.org"
    admin:
      users:
        - adminuser1
#+END_SRC

**** GitHub
     :PROPERTIES:
     :CUSTOM_ID: h:BB3C66CD
     :END:

Setup an OAuth app on GitHub

#+BEGIN_SRC yaml
  auth:
    type: github
    github:
      clientId: "xxx"
      clientSecret: "xxx"
      callbackUrl: "https://<your-domain-name>:443/oauth_callback"
    admin:
      users:
        - adminuser1
#+END_SRC
*** unidata/unidatahub
    :PROPERTIES:
    :CUSTOM_ID: h:214D1D4C
    :END:

Add the Unidata JupyterHub configuration (~unidata/unidatahub~). Customize cpu and memory according to size of cluster and expected number of students. Based on those assumptions shoot for 80% capacity. For example, if your cluster has 100 CPUs and you expect 80 students allow for a cpu limit of 1. The same reasoning applies for the memory settings. Adjust your arithmetic accordingly for cluster size and expected number of users.

#+BEGIN_SRC yaml
singleuser:
  startTimeout: 600
  memory:
    guarantee: 1G
    limit: 4G
  cpu:
    guarantee: 1
    limit: 2
  defaultUrl: "/lab"
  image:
    name: unidata/unidatahub
    tag: <container id>
  lifecycleHooks:
    postStart:
      exec:
          command:
            - "sh"
            - "-c"
            - >
              gitpuller https://github.com/Unidata/python-workshop master python-workshop;
              gitpuller https://github.com/julienchastang/unidata-python-gallery-mirror master notebook-gallery;
              gitpuller https://github.com/Unidata/online-python-training master online-python-training;
              cp /README_FIRST.ipynb /home/jovyan
hub:
  extraConfig: |-
    c.Spawner.cmd = ['jupyter-labhub']
#+END_SRC
** Navigate to JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h:209E2FBC
   :END:

In a web browser, navigate to [[https://jupyter-jetstream.unidata.ucar.edu][https://jupyterhub.unidata.ucar.edu]].

** Tearing Down JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h:1E027567
   :END:

*** Total Destructive Tear Down
    :PROPERTIES:
    :CUSTOM_ID: h:A69ADD92
    :END:

Tearing down the JupyterHub including user OpenStack volumes is possible. From the Helm and Kubernetes client:

#+BEGIN_SRC sh
helm delete jhub --purge
kubectl delete namespace jhub
#+END_SRC

followed by

#+BEGIN_SRC sh
terraform_destroy.sh.
#+END_SRC

*** Tear Down While Preserving User Volumes and Master Node IP
    :PROPERTIES:
    :CUSTOM_ID: h:5F2AA05F
    :END:

A gentler tear down that preserves the user volumes and master node IP is described in [[https://zonca.github.io/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html][Andrea's documentation]]. See the section on "persistence of user data".
