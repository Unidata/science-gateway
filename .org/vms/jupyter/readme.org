#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+OPTIONS: auto-id:t
#+TITLE: Creating a JupyterHub on Jetstream with the Zero to JupyterHub Project
#+DATE:  <2017-06-26 Mon>
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 9.0.5)

* Creating a JupyterHub on Jetstream with the Zero to JupyterHub Project
  :PROPERTIES:
  :CUSTOM_ID: h-D73CBC56
  :END:

** Kubernetes Cluster
   :PROPERTIES:
   :CUSTOM_ID: h-65F9358E
   :END:

*** jupyterhub.sh
    :PROPERTIES:
    :CUSTOM_ID: h-B56E19AB
    :END:

~jupyterhub.sh~ and the related ~z2j.sh~ are convenience scripts similar to ~openstack.sh~ to give you access to a pre-configured environment that will allow you to build and/or run a Zero to JupyterHub cluster. It also relies on the [[../../openstack/readme.md][same Docker container]] as the ~openstack.sh~ script. ~jupyterhub.sh~ takes the following
required arguments:

#+BEGIN_SRC shell
-n, --name JupyterHub name
-p, --ip JupyterHub IP
-o, --openrc openrc.sh absolute path
#+END_SRC

/Important/: The ~--name~ argument is used to set the names of the instances (VMs) of the cluster, which in turn is used to define the DNS name of assigned to the floating IP of the master node ([[../../vms/openstack/readme.org::#h-612458CB][see here]]). Ensure that the name provided to ~jupyterhub.sh~ results in a domain name that is less than 64 characters long, else LetsEncrypt will not be able to issue a certificate ([[https://letsencrypt.org/docs/glossary/#def-CN][see here]]).

Invoke ~jupyterhub.sh~ from the ~science-gateway/openstack~ directory. ~jupyterhub.sh~ and the related ~z2j.sh~ ensure the information for this Zero to JupyterHub cluster is persisted outside the container via Docker file mounts -- otherwise all the information about this cluster would be confined in memory inside the Docker container. The vital information will be persisted in a local ~jhub~ directory.

*** Create Cluster
    :PROPERTIES:
    :CUSTOM_ID: h-2FF65549
    :END:

[[../../openstack/readme.md][Create a Kubernetes cluster]] with the desired number of nodes and VM sizes. Lock down the master node of the cluster per Unidata security procedures. Work with sys admin staff to obtain a DNS name (e.g., jupyterhub.unidata.ucar.edu), and a certificate from a certificate authority for the master node. Alternatively, you can
use JetStream2's [[../../openstack/readme.md#dynamicdns][dynamic DNS]] and acquire a self signed certificate with [[#h-294A4A20][LetsEncrypt]].

** Docker Image for JupyterHub User Environment
   :PROPERTIES:
   :CUSTOM_ID: h-CD007D2A
   :END:

Build the Docker container that will be employed by the user environment on their JupyterHub instance. This Docker image will be [[#h-214D1D4C][referenced in the secrets.yaml]]. Uniquely tag the image with a date and ID for sane retrieval and referencing. For example:

#+BEGIN_SRC sh
  docker build -t unidata/unidatahub:`date +%Y%b%d_%H%M%S`_`openssl rand -hex 4` . > /tmp/docker.out 2>&1 &
  docker push unidata/unidatahub:<container id>
#+END_SRC

** Configure and Deploy the JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h-E5CA5D99
   :END:

From the client host where you created the Kubernetes cluster, follow [[https://zonca.dev/2020/06/kubernetes-jetstream-kubespray.html#install-jupyterhub][Andrea Zonca's instructions]].

After you have created the ~secrets.yaml~ as instructed, customize it with the choices below

*** SSL Certificates
    :PROPERTIES:
    :CUSTOM_ID: h-294A4A20
    :END:

**** Letsencrypt
     :PROPERTIES:
     :CUSTOM_ID: h-E1082806
     :END:

Follow [[https://www.zonca.dev/posts/2020-03-13-setup-https-kubernetes-letsencrypt.html][Andrea's instructions]] on setting up letsencrypt using [[https://cert-manager.io/][cert-manager]]. Due to a [[https://docs.jetstream-cloud.org/faq/trouble/#i-cant-ping-or-reach-a-publicfloating-ip-from-an-internal-non-routed-host][network change between JS1 and JS2]], the cert-manager pods must be run on the k8s master node in order to successfully complete the [[https://letsencrypt.org/how-it-works/][challenges]] required by letsencrypt to issue the certificate. Pay special attention to the [[https://www.zonca.dev/posts/2020-03-13-setup-https-kubernetes-letsencrypt.html#bind-the-pods-to-the-master-node][Bind the pods to the master node]] section.

For further reading:

   - [[https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/#create-a-pod-that-gets-scheduled-to-your-chosen-node][Assigning a pod to a specific node]]
   - [[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/][Taints and Tolerations]]

**** Certificate from Certificate Authority
     :PROPERTIES:
     :CUSTOM_ID: h-205AEDAB
     :END:

Work with Unidata system administrator staff to obtain a certificate from a trusted certificate authority.

Follow [[https://www.zonca.dev/posts/2018-09-24-jetstream_kubernetes_kubespray_jupyterhub#setup-https-with-custom-certificates][Andrea's instructions]] on setting up HTTPS with custom certificates. Note that when adding the key with

#+BEGIN_SRC shell
 kubectl create secret tls <cert-secret> --key ssl.key --cert ssl.crt -n jhub
#+END_SRC

supply the base and intermediate certificates and not the full chain certificate (i.e., with root certificates). You can find these certificates [[https://uit.stanford.edu/service/ssl/chain][here]].

Here is a snippet of what the ingress configuration will look like in the ~secrets.yaml~.

#+BEGIN_SRC yaml
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "incommon"
    hosts:
        - <jupyterhub-host>
    tls:
        - hosts:
           - <jupyterhub-host>
          secretName: <secret_name>
#+END_SRC

***** Certificate Expiration and Renewal
:PROPERTIES:
:CUSTOM_ID: h-055BCE98
:END:

When these certificates expire, they can be updated with the snippet below, but *be careful* to update the certificate on the correct JupyterHub deployment. Otherwise, you will be in cert-manger hell.

#+BEGIN_SRC shell
kubectl create secret tls cert-secret --key ssl.key --cert ssl.crt -n jhub \
    --dry-run=client -o yaml | kubectl apply -f -
#+END_SRC

*** OAuth Authentication
  :PROPERTIES:
  :CUSTOM_ID: h-8A3C5434
  :END:

**** Globus
  :PROPERTIES:
  :CUSTOM_ID: h-C0E8193F
  :END:

[[https://developers.globus.org/][Globus OAuth capability]] is available for user authentication. The instructions [[https://oauthenticator.readthedocs.io/en/latest/reference/api/gen/oauthenticator.globus.html][here]] are relatively straightforward.

#+BEGIN_SRC yaml
  auth:
    type: globus
    globus:
      clientId: "xxx"
      clientSecret: "xxx"
      callbackUrl: "https://<jupyterhub-host>:443/oauth_callback"
      identityProvider: "xsede.org"
    admin:
      users:
        - adminuser1
#+END_SRC

**** GitHub
     :PROPERTIES:
     :CUSTOM_ID: h-BB3C66CD
     :END:

Setup an OAuth app on GitHub

#+BEGIN_SRC yaml
  auth:
    type: github
    github:
      clientId: "xxx"
      clientSecret: "xxx"
      callbackUrl: "https://<jupyterhub-host>:443/oauth_callback"
    admin:
      users:
        - adminuser1
#+END_SRC

*** Docker Image and Other Configuration
    :PROPERTIES:
    :CUSTOM_ID: h-214D1D4C
    :END:

Reference [[#h-CD007D2A][the previously built Docker image]] (e.g., ~unidata/unidatahub:2022Dec15_031132_fe2ea584~). Customize the desired CPU / RAM usage. [[https://docs.google.com/spreadsheets/d/15qngBz4L5gwv_JX9HlHsD4iT25Odam09qG3JzNNbdl8/edit?usp=sharing][This spreadsheet]] will help you determine the size of the cluster based on number of users, desired cpu/user, desired RAM/user. Duplicate it and adjust it for your purposes.

#+INCLUDE: "../../../vms/jupyter/secrets.yaml" src yaml :lines "35-62"

*** JupyterHub Profiles
:PROPERTIES:
:CUSTOM_ID: h-5BE09B80
:END:

A JupyterHub may be configured to give users different [[https://z2jh.jupyter.org/en/stable/jupyterhub/customizing/user-environment.html#using-multiple-profiles-to-let-users-select-their-environment][profile options]] when logging in. This can be useful when, for example, a faculty member is using JupyterHub for multiple courses and wants to keep them seperate. Another use case is for creating "high power" or "low power" environments, which are allocated varying levels of computational resources, i.e. RAM and CPU. This can be applied in an undergraduate research setting where an instructor and their students use the low power environments during synchronous instruction and the high power environment for asynchronous workflows.

An example of high and low power environments is shown below.

#+begin_src yaml
  singleuser:
    # Set defaults and options shared by all profiles
    extraEnv:
      NBGITPULLER_DEPTH: "0"
    storage:
      capacity: 5Gi
    startTimeout: 600
    image:
      name: "unidata/someImage"
      tag: "someTag"
    # Profile definitions
    profileList:
      - display_name: "High Power (default)"
        description: "12 GB of memory; up to 4 vCPUs"
        kubespawner_override:
          mem_guarantee: 12G
          mem_limit: 12G
          cpu_guarantee: 2
          cpu_limit: 4
        default: true
      - display_name: "Low Power"
        description: "6 GB of memory; up to 2 vCPUS"
        kubespawner_override:
          mem_guarantee: 6G
          mem_limit: 6G
          cpu_guarantee: 1
          cpu_limit: 2
#+end_src

Note, however, that while one would typically provide ~secrets.yaml~ with the CPU and memory guarantees/limits as shown below, when using the ~kubespawner_override~ object to set these options for various profiles, you must provide the names of the fields as Kubespawner will recognize them.

#+begin_src yaml
# Typical manner of configuring CPU and memory options
singleuser:
  memory:
    guarantee: 4G
    limit: 4G
  cpu:
    guarantee: 1
    limit: 2

# Kubespawner override
singleuser:
  profileList:
    - kubespawner_override:
      mem_guarantee: 16G
      mem_limit: 16G
      cpu_guarantee: 4
      cpu_limit: 4
#+end_src

See [[https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1242#issuecomment-484895216][this]] GitHub issue for a description of the discrepancy, and the [[https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html][Kubespawner docs]] for the appropriate names to use for the various options when creating profiles.

*** Create a Large Data Directory That Can Be Shared Among All Users
:PROPERTIES:
:CUSTOM_ID: h-C95C198A
:END:

[[https://www.zonca.dev/posts/2023-02-06-nfs-server-kubernetes-jetstream][Andrea has a tutorial about sharing a directory]] (e.g., =/share/data=) via Kubernetes and NFS. The instructions basically work as advertised with the KubeSpray option (not Magnum -- I have not tried that), e.g.,

#+begin_src yaml
  nfs:
      # for Magnum
      # server: 10.254.204.67
      # for Kubespray
      server: 10.233.46.63
      path: /
#+end_src

The ~clusterIP~ is arbitrary and the one in the =jupyterhub-deploy-kubernetes-jetstream/nfs/= directory works. That IP is referenced in multiple locations in that directory. Make sure you get them all.

Define the size of the shared volume in =create_nfs_volume.yaml=, e.g.,:

#+begin_src yaml
  resources:
    requests:
      storage: 300Gi
#+end_src

Verify ~nfs-common~ is installed on the worker nodes (more recent versions of AZ's ~jetstream_kubespray~ project will have this already so you won't have to manually install the package), e.g.,

#+begin_src sh
  sudo apt install -y nfs-common
#+end_src

*** Ensure "Core" Pods Are Scheduled on a Dedicated Node
:PROPERTIES:
:CUSTOM_ID: h-6784737C
:END:

When a JupyterHub is expected to be used for especially resource intensive tasks, for example running WRF from within JupyterHub, by multiple users simultaneously, their single user pods can use all of a worker node's resources. This is a problem when these worker nodes also contain the JupyterHub's [[https://z2jh.jupyter.org/en/stable/resources/reference.html#scheduling-corepods][core pods]], which all perform some essential function of a healthy Zero-to-JupyterHub cluster. In particular, it's been observed that if the proxy pod, the component which routes both internal and external requests to the Hub and single user servers, does not have the necessary resources, the JupyterHub will crash.

To prevent this from happening, we can ensure all core pods are scheduled on a dedicated node. This is accomplished by assigning to a chosen node a [[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/][taint]], an attritube which prevents pods from spawning unless they have the corresponding [[https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/][toleration]]. This alone is not enough however, as a pod's [[https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity/][node affinity]] must require it to spawn on that specific node. The process is described below.

Add the taint to ~<node-name~:

#+BEGIN_SRC shell
  kubectl taint nodes <node-name> hub.jupyter.org/dedicated=core:NoSchedule
#+END_SRC

Add the label that the pods will look for when being scheduled on a node:

#+BEGIN_SRC shell
  kubectl label nodes <node-name> hub.jupyter.org/node-purpose=core
#+END_SRC

No ~kubectl~ commands need to be explicitly executed to modify the core pods. The toleration is applied to the core pods [[https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml#L552][by default]], however add the following to the ~secrets.yaml~ in order to make our intentions explicit. It is also noted that, by default, pods are [[https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml#L563][preferred]], not required, to spawn on this dedicated core node. Thus, ensure that ~scheduling.corePods.nodeAffinity.matchNodePurpose~ is set to ~require~.

#+BEGIN_SRC yaml
  scheduling:
    corePods:
      tolerations:
        - key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
          effect: NoSchedule
        - key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
          effect: NoSchedule
      nodeAffinity:
        matchNodePurpose: require
#+END_SRC

After all these changes have been made, run ~bash install_jhub.sh~ once again to apply them, and run a ~kubectl get pods -n jhub -o wide~ to confirm that core pods are running on the intended node. Single user pods should no longer be spawned on the dedicated core node, but any preexisting single user pods will may still reside on this node until they are eventually culled by the Hub.

** Navigate to JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h-209E2FBC
   :END:

In a web browser, navigate to your newly minted JupyterHub and see if it is as you expect.

** Tearing Down JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h-1E027567
   :END:

*** Total Destructive Tear Down
    :PROPERTIES:
    :CUSTOM_ID: h-A69ADD92
    :END:

Tearing down the JupyterHub including user OpenStack volumes is possible. From the Helm and Kubernetes client:

#+BEGIN_SRC sh
  helm uninstall jhub -n jhub
  # Think before you type !
  echo $CLUSTER; sleep 60; kubectl delete namespace jhub
#+END_SRC

To further tear down the Kubernetes cluster see [[file:../../openstack/readme.org::#h-DABDACC7][Tearing Down the Cluster]].

*** Tear Down While Preserving User Volumes
    :PROPERTIES:
    :CUSTOM_ID: h-5F2AA05F
    :END:

A gentler tear down that preserves the user volumes is described in [[https://www.zonca.dev/posts/2018-09-24-jetstream_kubernetes_kubespray_jupyterhub][Andrea's documentation]]. See the section on "persistence of user data".
** Troubleshooting
   :PROPERTIES:
   :CUSTOM_ID: h-0E48EFE9
   :END:
*** Unresponsive JupyterHub
    :PROPERTIES:
    :CUSTOM_ID: h-FF4348F8
    :END:

**** Preliminary Work
     :PROPERTIES:
     :CUSTOM_ID: h-C2429D6E
     :END:

If a JupyterHub becomes unresponsive (e.g., 504 Gateway Time-out), login in to the Kubernetes client and do preliminary backup work in case things go badly. First:

#+BEGIN_SRC shell
  kubectl get pvc -n jhub -o yaml > pvc.yaml.ro
  kubectl get pv -n jhub -o yaml > pv.yaml.ro
  chmod 400 pvc.yaml.ro pv.yaml.ro
#+END_SRC

Make ~pvc.yaml.ro~ ~pv.yaml.ro~ read only since these files could become precious in  case you have to do data recovery for users. More on this subject below.

**** Delete jhub Pods
     :PROPERTIES:
     :CUSTOM_ID: h-6404011E
     :END:

Next, start investigating by issuing:

#+BEGIN_SRC shell
  kubectl get pods -n jhub
#+END_SRC

this command will yield something like

#+BEGIN_SRC shell
  NAME                      READY   STATUS    RESTARTS   AGE
  hub-5bdccd4784-lzw87      1/1     Running   0          17h
  jupyter-joe               1/1     Running   0          4h51m
  proxy-7b986cdb75-mhl86    1/1     Running   0          29d
#+END_SRC

Now start deleting the ~jhub~ pods starting with the user pods (e.g., ~jupyter-joe~).

#+BEGIN_SRC
  kubectl delete pod <pod name> -n jhub
#+END_SRC

Check to see if the JupyterHub is reachable. If it is not, keep deleting pods checking for reachability after each pod deletion.

**** Delete jhub, But Do Not Purge Namespace
     :PROPERTIES:
     :CUSTOM_ID: h-1C4D98E6
     :END:

If the JupyterHub is still not reachable, you can try deleting and recreating the JupyterHub but *do not* delete the namespace as you will wipe out user data.

#+BEGIN_SRC shell
  helm uninstall jhub -n jhub
  # But DO NOT issue this command
  # kubectl delete namespace jhub
#+END_SRC

Then try reinstalling with

#+BEGIN_SRC
  bash install_jhub.sh
#+END_SRC

Now, try recover user volumes as [[https://zonca.dev/2018/09/kubernetes-jetstream-kubespray-jupyterhub.html#delete-and-recreate-openstack-instances][described at the end of the section here]] with the ~pvc.yaml.ro~ ~pv.yaml.ro~ saved earlier (make writable copies of those ~ro~ files). If that still does not work, you can try destroying the entire cluster and recreating it as described in that same link.

*** Volumes Stuck in Reserved State
    :PROPERTIES:
    :CUSTOM_ID: h-354DE174
    :END:

**** Background
     :PROPERTIES:
     :CUSTOM_ID: h-1765D7EB
     :END:

Occasionally, when logging into a JupyterHub the user will encounter a volume attachment error that causes a failure in the login process. [[https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/issues/40][This is an ongoing issue on Jetstream that we have never been able to get to the bottom of]]. The user will see an error that looks something like:

#+BEGIN_SRC shell
2020-03-27 17:54:51+00:00 [Warning] AttachVolume.Attach failed for volume "pvc-5ce953e4-6ad9-11ea-a62a-fa163ebb95dd" : Volume "0349603a-967b-44e2-98d1-0ba1d42c37d8" is attaching, can't finish within the alloted time
#+END_SRC

When you then do an ~openstack volume list~, you will see something like this where a volume is stuck in "reserved":

#+BEGIN_SRC shell
|--------------------------------------+------------------------------------------+----------|
| ID                                   | Name                                     | Status   |
|--------------------------------------+------------------------------------------+----------|
| 25c25c5d-75cb-48fd-a9c4-4fd680bea79b | pvc-41d76080-6ad7-11ea-a62a-fa163ebb95dd | reserved |
|--------------------------------------+------------------------------------------+----------|
#+END_SRC

You (or if you do not have permission, Jetstream staff) can reset the volume with:

#+BEGIN_SRC shell
  openstack volume set --state available <volume uuid>
#+END_SRC

or with

#+BEGIN_SRC shell
      openstack volume list | grep -i reserved | awk \
          'BEGIN { FS = "|" } ; { print $2 }' | xargs -n1 openstack volume set \
      --state available
#+END_SRC

The problem is that once a volume gets stuck like this, it tends to happen again and again. In this scenario, [[#h-CB601D7B][you have to provide a long term solution to the user]].

**** Script to Mitigate Problem
     :PROPERTIES:
     :CUSTOM_ID: h-F7B1FC52
     :END:

Invoking this script (e.g., call it ~notify.sh~) from crontab, maybe every three minutes or so, can help mitigate the problem and give you faster notification of the issue. Note [[https://ifttt.com][iftt]] is a push notification service with webhooks available that can notify your smart phone triggered by a ~curl~ invocation as demonstrated below. You'll have to create an ifttt login and download the app on your smart phone.

#+BEGIN_SRC shell
  #!/bin/bash

  source /home/rocky/.bash_profile

  VAR=$(openstack volume list -f value -c ID -c Status | grep -i reserved | wc -l)

  MSG="Subject: Volume Stuck in Reserved on Jetstream"

  if [[ $VAR -gt 0 ]]
  then
      echo $MSG | /usr/sbin/sendmail my@email.com
      openstack volume list | grep -i reserved >> /tmp/stuck.txt
      curl -X POST https://maker.ifttt.com/trigger/jetstream/with/key/xyz
      openstack volume list -f value -c ID -c Status | grep -i reserved | awk \
          '{ print $1 }' | xargs -n1 openstack volume set --state available
  fi
#+END_SRC

you can invoke this script from crontab:

#+BEGIN_SRC shell
  */3 * * * * /home/rocky/notify.bash > /dev/null 2>&1
#+END_SRC

Note, again, this is just a temporary solution. You still have to provide a longer-term workaround described in the next section:

**** Not a Solution but a Longer Term Workaround
     :PROPERTIES:
     :CUSTOM_ID: h-CB601D7B
     :END:

[[#h-1765D7EB][With the volume ID obtained earlier]], issue:

#+BEGIN_SRC shell
  openstack volume attachment list --os-volume-api-version 3.27 | grep -i d910c7fae38b
#+END_SRC

which will yield something like:

#+BEGIN_SRC shell
  | 67dbf5c3-c190-4f9e-a2c9-78da44df6c75 | cf1a7adf-7b0a-422f-8843-d910c7fae38b | reserved  | 0593faaf-8ba0-4eb5-84ad-b7282ce5aac2 |
#+END_SRC

At this point, you may see /two/ entries (even though only one is shown here). One attachment in reserved and one that is attached.

Next, delete the reserved attachment:

#+BEGIN_SRC shell
  cinder attachment-delete 67dbf5c3-c190-4f9e-a2c9-78da44df6c75
#+END_SRC

*** Renew Expired K8s Certificates
:PROPERTIES:
:CUSTOM_ID: h-60D08FB6
:END:

****  Background
:PROPERTIES:
:CUSTOM_ID: h-01F8D10F
:END:

Kubernetes clusters use PKI certificates to allow the different components of K8s to communicate and authenticate with one another. See the [[https://kubernetes.io/docs/setup/best-practices/certificates/][official docs]] for more information. When firing up a JupyterHub cluster using the procedures outlined in this documentation, the certificates are automatically generated for us on cluster creation, however they expire after a full year. You can check the expiration date of your current certificates by running the following on the master node of the cluster:

#+BEGIN_SRC shell
  sudo kubeadm alpha certs check-expiration
#+END_SRC

Once the certificates have expired, you will be unable to run, for example, ~kubectl~ commands, and the [[https://kubernetes.io/docs/setup/best-practices/certificates/][control plane components]] will not be able to, for example, fire up new pods, ie new JupyterLab servers, nor perform ~helm~ upgrades to the server. Example output of running ~kubectl~ commands with expired
certificates is:

#+BEGIN_SRC shell
  # kubectl get pods -n jhub
  Unable to connect to the server: x509: certificate has expired or is not yet valid: current time 2022-06-29T23:09:31Z is after 2022-06-28T17:38:37Z
#+END_SRC

**** Resolution
:PROPERTIES:
:CUSTOM_ID: h-0A5DF245
:END:

There are a number of ways to renew certificates outlined in the [[https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/][official docs]]. Here, the manual renewal method is outlined. While this procedure should be non-destructive, it is recommended to have users backup data/notebooks before this is done. In addition, one of the steps requires a manual restart of the control plane pods, which means the Hub (and potentially user servers) may suffer a small amount of downtime.

All commands are ran on the master node of the cluster. In addition, the documentation does not include the ~alpha~ portion of the ~kubeadm~ commands outlined below. This is required: see the answer to [[https://serverfault.com/questions/1051333/how-to-renew-a-certificate-in-kubernetes-1-12][this]] question.

First, confirm that your certificates truly are expired:

#+BEGIN_SRC shell
  sudo kubeadm alpha certs check-expiration
#+END_SRC

Then, run the renewal command to renew all certs:

#+BEGIN_SRC shell
   sudo kubeadm alpha certs renew all
#+END_SRC

Double check the certificates were renewed:

#+BEGIN_SRC shell
  sudo kubeadm alpha certs check-expiration
#+END_SRC

Now, we must restart the control plane pods. We do this by moving the files found in ~/etc/kubernetes/manifests~ to a temporary place, waiting for the [[https://serverfault.com/questions/1051333/how-to-renew-a-certificate-in-kubernetes-1-12][kubelet]] to recognize the change in the manifests, and tear down the pods. Once this is done, the files can be moved back into ~/etc/kubernetes/manifests~, and we can wait for the kubelet to respawn the pods. Finally, reset the ~~/.kube/config~ file and run ~kubectl~ commands.

#+BEGIN_SRC shell
  ###
  # All commands ran on the master node
  ###

  # Copy manifests
  mkdir ~/manifestsBackup_yyyy_mm_dd
  sudo cp /etc/kubernetes/manifests/* ~/manifestsBackup_yyyy_mm_dd/

  # Sanity check
  ls ~/manifestsBackup_yyyy_mm_dd

  # Navigate to /etc/kubernetes/manifests and list files, to ensure we're removing
  # what we think we are
  cd /etc/kubernetes/manifests
  ls

  # Verify the containers you are about to remove are currently running
  sudo docker ps

  # Remove files
  rm ./*

  # Wait until the containers are removed
  sudo docker ps

  # Replace files
  sudo cp ~/manifestsBackup_yyyy_mm_dd/* /etc/kubernetes/manifests/

  # Wait until containers are respawned
  sudo docker ps

  # Reset the config
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

  # Cross your fingers and hope you can now run kubectl commands again!
  kubectl get pods --all-namespaces
#+END_SRC

If you want to run kubectl commands from another machine, for example the machine where we launch JupyterHubs from within docker containers, you must copy this config file to that machine's ~$HOME/.kube~ directory.

You should have the IP and ~ssh~ access of/to the master node. Copy over the config through ~scp~:

#+BEGIN_SRC shell
  ###
  # On the appropriate "Jupyter control center" docker container
  ###

  # Directory probably already exists, but try creating the directory anyways
  mkdir $HOME/.kube
  scp ubuntu@<ip>:~/.kube/config $HOME/.kube/config
#+END_SRC

Finally, edit the ~server~ value in the =$HOME/.kube/config= to point to ~127.0.0.1~, as kubectl will communicate with the api-server through a tunnel created on the Jupyter control container. See [[../../../openstack/bin/kube-setup2.sh][this]] script and the reference
therein for the reason behind doing this.

#+BEGIN_SRC shell
  # Change a line that looks like the following
  server: https://<some-ip>:6443
  # to
  server: https://127.0.0.1:6443
#+END_SRC

You should now be able to run ~kubectl~ commands, fire up new user servers, and run ~helm~ upgrades.
