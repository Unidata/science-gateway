#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+OPTIONS: auto-id:t
#+TITLE: Creating Jupyter VM on Jetstream
#+DATE:  <2017-06-26 Mon>
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 9.0.5)

#+PROPERTY: header-args :noweb yes :eval no

* Creating a Jupyter VM on Jetstream
  :PROPERTIES:
  :CUSTOM_ID: h:CF2006B5
  :END:
** Create a Jupyter VM on Jetstream
   :PROPERTIES:
   :CUSTOM_ID: h:CD4EE10C
   :END:

Create an ~m1.xlarge~ VM with the [[https://github.com/Unidata/xsede-jetstream/blob/master/openstack/readme.md][Jetstream OpenStack API]]. [[https://github.com/Unidata/xsede-jetstream/blob/master/openstack/readme.md#h:9BEEAB97][Create and attach]] a 1TB =/notebooks= and =/scratch= volumes to that VM. Work with Unidata system administrator staff to have this VM's IP address resolve to =jupyter-jetstream.unidata.ucar.edu=.

** Clone the xsede-jetstream Repository
   :PROPERTIES:
   :CUSTOM_ID: h:30553515
   :END:

 We will be making heavy use of the ~Unidata/xsede-jetstream~ git repository.

 #+BEGIN_SRC shell :tangle no :exports code
   git clone https://github.com/Unidata/xsede-jetstream ~/xsede-jetstream
 #+END_SRC

** Prepare Jupyter VM for Docker and docker-compose
   :PROPERTIES:
   :CUSTOM_ID: h:00BDD041
   :END:

With the help of Docker and ~docker-compose~, starting a VM containing a JupyterHub server is relatively simple. [[https://github.com/Unidata/xsede-jetstream/blob/master/docker-readme.md][See here to install Docker and docker-compose]].

** JupyterHub Configuration
   :PROPERTIES:
   :CUSTOM_ID: h:1217328A
   :END:

*** jupyterhub_config.py
    :PROPERTIES:
    :CUSTOM_ID: h:25E29186
    :END:

Copy the =jupyterhub_config.py= file to the =~/config/= directory. [[#h:524FAF4B][Subsequently]], you will have to make minor edits to supply the user and admin whitelist.

#+BEGIN_SRC shell :tangle ../../../vms/jupyter/jupyter-install.sh :shebang "#!/bin/bash"
  mkdir -p ~/config/
  cp jupyterhub_config.py ~/config/
#+END_SRC

*** nginx
    :PROPERTIES:
    :CUSTOM_ID: h:90A0BF68
    :END:

Must run nginx in parallel to JupyterHub to redirect ~http~ to ~https~.

#+BEGIN_SRC shell :tangle ../../../vms/jupyter/jupyter-install.sh
  mkdir -p ~/nginx/
  cp nginx.conf ~/nginx/
#+END_SRC

** Log Directories
   :PROPERTIES:
   :CUSTOM_ID: h:098522DC
   :END:

*** JupyterHub
    :PROPERTIES:
    :CUSTOM_ID: h:A1CDED76
    :END:

The JupyterHub log directory:

#+BEGIN_SRC shell :tangle ../../../vms/jupyter/jupyter-install.sh
   mkdir -p ~/logs/jupyter/
 #+END_SRC

*** nginx
    :PROPERTIES:
    :CUSTOM_ID: h:69CC6370
    :END:

The nginx log directory:

#+BEGIN_SRC shell :tangle ../../../vms/jupyter/jupyter-install.sh
   mkdir -p ~/logs/nginx/
 #+END_SRC


** SSL Certificate
   :PROPERTIES:
   :CUSTOM_ID: h:7D97FA52
   :END:

In the =~/config/ssl/= directory, obtain a ~ssl.key~, ~ssl.crt~ certificate pair from a certificate authority (e.g., letsencrypt).

#+BEGIN_SRC shell :tangle ../../../vms/jupyter/jupyter-install.sh
  mkdir -p ~/config/ssl/
#+END_SRC

Or generate a self-signed certificate with ~openssl~, but this is not recommended:

#+BEGIN_SRC shell :tangle no
  openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj \
    "/C=US/ST=Colorado/L=Boulder/O=Unidata/CN=jetstream.unidata.ucar.edu" \
    -keyout ~/config/ssl/ssl.key \
    -out ~/config/ssl/ssl.crt
#+END_SRC

** Ports 80, 443, and 8000
   :PROPERTIES:
   :CUSTOM_ID: h:ED417641
   :END:

[[https://github.com/Unidata/xsede-jetstream/blob/master/openstack/readme.md#h:D6B1D4C2][Open ports]] ~80~, ~443~, and ~8000~ on the Jupyter VM via OpenStack.

** Globus OAuth Setup
   :PROPERTIES:
   :CUSTOM_ID: h:524FAF4B
   :END:

This JupyterHub server makes use of [[https://developers.globus.org/][Globus OAuth capability]] for user authentication. The instructions [[https://github.com/jupyterhub/oauthenticator#globus-setup][here]] are relatively straightforward and mostly implemented in the [[https://github.com/Unidata/xsede-jetstream/blob/master/vms/jupyter/jupyterhub_config.py][jupyterhub_config.py]] JupyterHub configuration file. The only tricky part is to supply the ~OAUTH_CLIENT_ID~ and ~OAUTH_CLIENT_SECRET~ environment variables which you obtain when registering the JupyterHub server application (e.g., ~https://jupyter-jetstream.unidata.ucar.edu~) with Globus.

Supply the ~OAUTH_CLIENT_ID~ and ~OAUTH_CLIENT_SECRET~ environment variables in the =compose.env= file co-located with =docker-compose.yml=. Make sure you have correctly grabbed those variables from the https://developers.globus.org/. Not copying these variables correctly can be the source of errors and headaches.

Also in =jupyterhub_config.py=, supply the white list of administrator and users with ~c.Authenticator.admin_users~, ~c.Authenticator.whitelist~ variables. For example,

#+BEGIN_SRC python :eval no
  c.Authenticator.admin_users = {'jane','joe'}
  c.Authenticator.whitelist = {'jen','james'}
#+END_SRC

** docker-compose.yml
   :PROPERTIES:
   :CUSTOM_ID: h:8F37201D
   :END:

Based on the directory set we have defined, the =docker-compose.yml= file will look something like:

#+INCLUDE: "../../../vms/jupyter/docker-compose.yml" src yaml

** Start JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h:62B48A14
   :END:

Once you have done the work of setting up JupyterHub related directories, you need to build the container (which may take a while),

#+BEGIN_SRC shell
  docker build -t unidata/unidatahub .
#+END_SRC

and issue the command

#+BEGIN_SRC shell
  docker-compose up -d
#+END_SRC

to start JupyterHub

** Navigate to JupyterHub
   :PROPERTIES:
   :CUSTOM_ID: h:4DCCED79
   :END:

In a web browser, navigate to [[https://jupyter-jetstream.unidata.ucar.edu][https://jupyter-jetstream.unidata.ucar.edu]].
