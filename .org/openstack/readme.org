#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+OPTIONS: auto-id:t

#+TITLE: readme
#+DATE: <2017-03-02 Thu>
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 9.0.5)

* Running VMs on Jetstream with OpenStack
  :PROPERTIES:
  :CUSTOM_ID: h:90A8A74D
  :END:
** Introduction
   :PROPERTIES:
   :CUSTOM_ID: h:11F59F95
   :END:

It is preferable to interface with the XSEDE Jetstream cloud via the [[https://use.jetstream-cloud.org/application/dashboard][Atmosphere web interface]]. However, this web dashboard is limited in two important ways:

  1. Users cannot obtain VMs with static IPs
  2. Users cannot open low number ports (i.e., < ~1024~) with the exception of ports ~22~, ~80~ and ~443~ which are open by default.

If you are in either of these scenarios, you have to interface with Jetstream via the [[https://iujetstream.atlassian.net/wiki/display/JWT/Using+the+Jetstream+API][OpenStack API]]. The problem here is that there is some initial setup which is somewhat painful but that you do only once. We provide a Docker container that hopefully eases some of the pain as it has the OpenStack command line tools and convenience scripts installed. After that setup, you can interface with the Jetstream OpenStack command line via the =openstack.sh= script which will launch a Docker container that will enable you to:

  - Create IP Numbers
  - Create VMs
  - Tear down VMs
  - Create Data Volumes
  - Attach Data Volumes
  - Open TCP ports

Note, you do not have to employ this Docker container. It is merely provided as a convenience. If you choose, you can go through the Jetstream OpenStack API instructions directly and ignore all that follows.

** Install Docker (Do This Once)
   :PROPERTIES:
   :CUSTOM_ID: h:DE5B47F1
   :END:

[[https://github.com/Unidata/xsede-jetstream/blob/master/docker-readme.md][Install Docker]] in your computing environment because we will be interacting with the OpenStack Jetstream API via Docker. This step should make our lives easier.

** Clone the xsede-jetstream Repository (Do This Once)
   :PROPERTIES:
   :CUSTOM_ID: h:968FA51C
   :END:

We will be making heavy use of the ~Unidata/xsede-jetstream~ git repository.

#+BEGIN_SRC sh :eval no
  git clone https://github.com/Unidata/xsede-jetstream
#+END_SRC

** Pull or Build Docker Container (Do This Once)
   :PROPERTIES:
   :CUSTOM_ID: h:4A9632CC
   :END:

#+BEGIN_SRC sh :eval no
  cd xsede-jetstream/openstack
#+END_SRC

At this point, you can either pull or build the ~xsede-jetstream~ container:

*** Pull Container
    :PROPERTIES:
    :CUSTOM_ID: h:B5690030
    :END:
#+BEGIN_SRC sh :eval no
  docker pull unidata/xsede-jetstream
#+END_SRC

*** Build Container
    :PROPERTIES:
    :CUSTOM_ID: h:1C54F677
    :END:
#+BEGIN_SRC sh :eval no
  docker build -t unidata/xsede-jetstream .
#+END_SRC

** API Setup
   :PROPERTIES:
   :CUSTOM_ID: h:CBD5EC54
   :END:

We will be using the Jetstream API directly and via convenience scripts.

*** Download and Edit openrc.sh (Do This Once)
    :PROPERTIES:
    :CUSTOM_ID: h:8B3E8EEE
    :END:

The next part involves downloading the =openrc.sh= file to work with our OpenStack allocation. You will have first login to the OpenStack TACC dashboard which will necessitate a password reset. Unfortunately, this login is not the same as the Jetstream Atmosphere web interface login. Also, follow the usual password advice of not reusing passwords as this password will end up in your OpenStack environment and [[#h:9C0700C5][you may want to add it]] in the =openrc.sh= file for convenience.

**** [[https://portal.tacc.utexas.edu/password-reset/][Reset your OpenStack TACC dashboard password]]
     :PROPERTIES:
     :CUSTOM_ID: h:3E2185E5
     :END:

**** Download your =openrc.sh= file from the IU (not TACC) dashboard at  [[https://iu.jetstream-cloud.org]] and move it to the =openstack/bin= directory.
     :PROPERTIES:
     :CUSTOM_ID: h:B34CC3AF
     :END:

   - See /"Use the Horizon dashboard to generate openrc.sh"/ in the [[https://iujetstream.atlassian.net/wiki/display/JWT/Setting+up+openrc.sh][Jetstream API instructions]].
   - From the [[https://iu.jetstream-cloud.org/project/api_access/][IU dashboard]], navigate to =Project=, =API Access=, then select =Download OpenStack RC File= at top-right.
   - Select *OpenStack RC File (Identity API 3)* , which will download as a script named something like =TG-ATM160027-openrc.sh=. You should rename it to =openrc.sh=.
   - Move this file to =bin/openrc.sh= (e.g., =/home/jane/xsede-jetstream/openstack/bin/openrc.sh=).

**** Edit =bin/openrc.sh= Password (Optional)
     :PROPERTIES:
     :CUSTOM_ID: h:9C0700C5
     :END:

For convenience, you may wish to add your password to the =openrc.sh= file. Again, follow the usual advice of not reusing passwords as this password will end up in your OpenStack environment.

Edit the =openrc.sh= file and the supply the TACC resource =OS_PASSWORD= you [[#h:8B3E8EEE][reset earlier]]:

#+BEGIN_SRC sh :eval no
  export OS_PASSWORD="changeme!"
#+END_SRC

Comment out

#+BEGIN_SRC sh :eval no
# echo "Please enter your OpenStack Password: "
# read -sr OS_PASSWORD_INPUT
#+END_SRC

*** Fire Up Container and More Setup
    :PROPERTIES:
    :CUSTOM_ID: h:30B73273
    :END:
**** openstack.sh
     :PROPERTIES:
     :CUSTOM_ID: h:5F4AFF6F
     :END:

Start the ~unidata/xsede-jetstream~ container with =openstack.sh= convenience script. The script take a ~-o~ argument for your =openrc.sh= file and a ~-s~ argument for the directory containing or will contain your ssh keys (e.g., =/home/jane/xsede-jetstream/openstack/ssh= or a new directory that will contain contain your Jetstream OpenStack keys that we will be creating shortly). *Both arguments must be supplied with fully qualified path names.*

#+BEGIN_SRC sh :eval no
  chmod +x openstack.sh
  ./openstack.sh -o </path/to/your openrc.sh file> -s </path/to/your/ssh directory>
#+END_SRC

Subsequently, when interacting with Jetstream via OpenStack API now and in the future, you will be using this container to create VMs, mount volumes, etc.

A wrapper script =run.sh= is provided, which assumes that directories =bin/= and =ssh/= exist in the working directory, and that =bin/= contains =openrc.sh=:

#+BEGIN_SRC sh
  ./run.sh
#+END_SRC

**** Create ssh Keys (Do This Once)
     :PROPERTIES:
     :CUSTOM_ID: h:EE48476C
     :END:

This step of ssh key generation is important. In our experience, we have not had good luck with preexisting keys. You may have to generate a new one. Be careful with the ~-f~ argument below. We are operating under one allocation so make sure your key names do not collide with other users. Name your key something like ~<some short somewhat unique id>-${OS_PROJECT_NAME}-api-key~. Then you add your public key the TACC dashboard with ~openstack keypair create~.

 #+BEGIN_SRC sh :eval no
  cd ~/.ssh
  ssh-keygen -b 2048 -t rsa -f <key-name> -P ""
  openstack keypair create --public-key <key-name>.pub <key-name>
  # go back to home directory
  cd
 #+END_SRC

The =ssh= directory was mounted from outside the Docker container you are currently running. Your public/private key should be saved there. Don't lose it or else you may not be able to delete the VMs you are about to create.

**** Testing Setup
     :PROPERTIES:
     :CUSTOM_ID: h:257FBBBE
     :END:

At this point, you should be able to run ~openstack image list~ which should yield something like:

#+TBLNAME: image-list
| ID                                   | Name                               |
|--------------------------------------+------------------------------------|
| fd4bf587-39e6-4640-b459-96471c9edb5c | AutoDock Vina Launch at Boot       |
| 02217ab0-3ee0-444e-b16e-8fbdae4ed33f | AutoDock Vina with ChemBridge Data |
| b40b2ef5-23e9-4305-8372-35e891e55fc5 | BioLinux 8                         |
|--------------------------------------+------------------------------------|

If not, check your setup.

** Working with Jetstream API to Create VMs
   :PROPERTIES:
   :CUSTOM_ID: h:03303143
   :END:

At this point, we are past the hard work. You will employ the ~unidata/xsede-jetstream~ container accessed via the =openstack.sh= convenience script to

  - Create IP Numbers
  - Create VMs
  - Tear down VMs
  - Create Data Volumes
  - Attach Data Volumes

If you have not done so already:

#+BEGIN_SRC sh :eval no
  ./openstack.sh -o </path/to/your openrc.sh file> -s </path/to/your/ssh directory>
#+END_SRC

*** IP Numbers
    :PROPERTIES:
    :CUSTOM_ID: h:5E7A7E65
    :END:

We are ready to fire up VMs. First create an IP number which we will be using shortly:

#+BEGIN_SRC sh :eval no
  openstack floating ip create public
  openstack floating ip list
#+END_SRC

or you can just ~openstack floating ip list~ if you have IP numbers left around from previous VMs.

*** Boot VM
    :PROPERTIES:
    :CUSTOM_ID: h:EA17C2D9
    :END:

**** Create VM
    :PROPERTIES:
    :CUSTOM_ID: h:7E8034E7
    :END:
Now you can boot up a VM with something like the following command:

#+BEGIN_SRC sh :eval no
  boot.sh -n unicloud -k <key-name> -s m1.medium -ip 149.165.157.137
#+END_SRC

The ~boot.sh~ command takes a VM name, [[#h:EE48476C][ssh key name]] defined earlier, size, and IP number created earlier, and optionally an image UID which can be obtained with ~openstack image list | grep -i featured~. Note that these feature VMs are recommended by Jetstream staff, and have a default user corresponding to the Linux distribution flavor. For example,

#+BEGIN_SRC sh :eval no
$ openstack image list | grep -i featured
#+END_SRC

may yield something like:

#+BEGIN_SRC sh :eval no
| 4ada5750-4ba4-4cc6-8d12-9001fe04ae1b | JS-API-Featured-Centos6-Feb-13-2018  |
| 87df53d5-04bd-4bb8-862e-b67247f07f87 | JS-API-Featured-Centos7-Feb-13-2018  |
| 20e6ec66-a5ec-41fc-820c-08a2af5bd1eb | JS-API-Featured-Ubuntu14-Feb-13-2018 |
| a2c80fbf-2875-457a-b488-28c4afeb296b | JS-API-Featured-Ubuntu16-Feb-13-2018 |
#+END_SRC

The CentOS VMs will have a default of user ~centos~ and the Ubuntu VMs will have a default user of ~ubuntu~.

Also see ~boot.sh -h~ and ~openstack flavor list~ for more information.

**** SSH Into New VM
    :PROPERTIES:
    :CUSTOM_ID: h:10ACA1BC
    :END:

At this point, you can ~ssh~ into our newly minted VM. Explicitly providing the key name with the ~ssh~ ~-i~ argument and a user name (e.g., ~ubuntu~ or ~centos~) may be important:

#+BEGIN_SRC sh :eval no
  ssh -i ~/.ssh/<key-name> ubuntu@149.165.157.137
#+END_SRC

At this point, you might see

#+BEGIN_SRC sh :eval no
  ssh: connect to host 149.165.157.137 port 22: No route to host
#+END_SRC

Usually waiting for a few minutes resolves the issue. If you are still have trouble, try ~openstack server stop <vm-uid-number>~ followed by ~openstack server start <vm-uid-number>~.

**** Adding Additional SSH Keys (Optional)
     :PROPERTIES:
     :CUSTOM_ID: h:A66BED33
     :END:

Once you are in your VM, it is probably best to add additional ssh public keys into the ~authorized_keys~ file to make logging in easier from whatever host you are connecting from.

*** Create and Attach Data Volumes
    :PROPERTIES:
    :CUSTOM_ID: h:9BEEAB97
    :END:

You can create data volumes via the OpenStack API. As an example, here, we will be creating a 750GB ~data~ volume. You will subsequently attach the data volume:

#+BEGIN_SRC sh :eval no
  openstack volume create --size 750 data

  openstack volume list && openstack server list

  openstack server add volume <vm-uid-number> <volume-uid-number>
#+END_SRC

You will then be able to log in to your VM and mount your data volume with typical Unix ~mount~, ~umount~, and ~df~ commands. If running these command manually (not using the =mount.sh= script) you will need to run ~kfs.ext4 /dev/sdb~ to create an ~ext4~ partition using the entire disk.

There is a ~mount.sh~ convenience script to mount *uninitialized* data volumes. Run this script as root or sudo on the newly created VM not from the OpenStack CL.

**** Ensure Volume Availability Upon Machine Restart
     :PROPERTIES:
     :CUSTOM_ID: h:F6AF5F18
     :END:

You want to ensure data volumes are available when the VM starts (for example after a reboot). To achieve this objective, you can run this command which will add an entry to the ~/etc/fstab~ file:

#+BEGIN_SRC shell :eval no
  echo UUID=2c571c6b-c190-49bb-b13f-392e984a4f7e /data ext4 defaults 1 1 | tee \
      --append /etc/fstab > /dev/null
#+END_SRC

where the ~UUID~ represents the ID of the data volume device name (e.g., ~/dev/sdb~) which you can discover with the ~blkid~ command. [[https://askubuntu.com/questions/164926/how-to-make-partitions-mount-at-startup-in-ubuntu-12-04][askubuntu]] has a good discussion on this topic.

*** Opening TCP Ports
    :PROPERTIES:
    :CUSTOM_ID: h:D6B1D4C2
    :END:

Opening TCP ports on VMs must be done via OpenStack with the ~openstack security group~ command line interfaces. In addition, this can be For example, to create a security group that will enable the opening of TCP port ~80~:

#+BEGIN_SRC sh :eval no
  secgroup.sh -n my-vm-ports -p 80
#+END_SRC

Once the security group is created, you can attach multiple TCP ports to that security group with ~openstack security group~ commands. For example, here we are attaching port ~8080~ to the ~global-my-vm-ports~ security group.

#+BEGIN_SRC sh :eval no
  openstack security group rule create global-my-vm-ports --protocol tcp --dst-port 8080:8080 --remote-ip 0.0.0.0/0
#+END_SRC

Finally, you can attach the security group to the VM (e.g., ~my-vm~) with:

#+BEGIN_SRC sh :eval no
  openstack server add security group my-vm global-my-vm-ports
#+END_SRC
*** Tearing Down VMs
    :PROPERTIES:
    :CUSTOM_ID: h:1B38941F
    :END:
**** umount External Volumes
     :PROPERTIES:
     :CUSTOM_ID: h:B367439E
     :END:

There is also a ~teardown.sh~ convenience script for deleting VMs. Be sure to ~umount~ any data volumes before deleting a VM. For example on the VM in question,

#+BEGIN_SRC sh :eval no
  umount /data
#+END_SRC

You may have to verify, here, that nothing is writing to that data volume such as Docker or NFS (e.g., ~docker-compose stop~, ~sudo service nfs-kernel-server stop~), in case you get errors about the volume being busy.

In addition, just to be on the safe side, remove the volume from the VM via OpenStack:

#+BEGIN_SRC sh :eval no
  openstack volume list && openstack server list

  openstack server remove volume <vm-uid-number> <volume-uid-number>
#+END_SRC

**** Tear Down
     :PROPERTIES:
     :CUSTOM_ID: h:8FDA03F6
     :END:

Then finally from the OpenStack CL,

#+BEGIN_SRC sh :eval no
  teardown.sh -n unicloud -ip 149.165.157.137
#+END_SRC

For now, you have to supply the IP number even though the script should theoretically be smart enough to figure that out.
